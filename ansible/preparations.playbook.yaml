- name: Preparations
  hosts: openstack
  gather_facts: true
  tags: preparations

  tasks:
    - name: SSH Keys
      tags: [preparations, ssh]
      block:
        - name: Copy ssh key to deploy node
          ansible.builtin.copy:
            src: ssh/id_ubuntu
            dest: "{{ ansible_env.HOME }}/.ssh/id_ed25519"
            mode: '0600'
          when: "'deploy' in group_names"

        - name: Add authorized key
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ lookup('file', 'ssh/id_ubuntu.pub') }}"
            state: present

    - name: Disable swap
      tags: [preparations, disable-swap]
      become: true
      block:
        - name: Disable SWAP
          ansible.builtin.command: swapoff -a
          changed_when: true

        - name: Delete swapfile
          ansible.builtin.file:
            path: /swapfile
            state: absent

    - name: System upgrade
      become: true
      tags: [preparations, system_upgrade]
      block:
        - name: Ensure system is up-to date
          ansible.builtin.apt:
            update_cache: true
            upgrade: dist

        - name: Check if reboot required
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_required_file

        - name: Reboot if required
          ansible.builtin.reboot:
          when: reboot_required_file.stat.exists

    - name: Network setup
      become: true
      tags: [preparations, network]
      block:
        - name: Ensure that systemd network veth interface as external NIC exists
          ansible.builtin.copy:
            src: 25-veth-openstack.netdev
            dest: /lib/systemd/network/25-veth-openstack.netdev
            owner: root
            group: root
            mode: '0644'
          register: systemd_veth

        - name: Restart systemd-networkd if required
          ansible.builtin.systemd_service:
            name: systemd-networkd
            state: restarted
          when: systemd_veth is changed

        - name: Ensure that netplan config exists
          ansible.builtin.copy:
            src: 50-cloud-init.yaml
            dest: /etc/netplan/50-cloud-init.yaml
            owner: root
            group: root
            mode: '0600'
          register: netplan_config

        - name: Reapply netplan config if required
          ansible.builtin.command: netplan generate && netplan apply
          when: netplan_config is changed
          changed_when: true

    - name: Ensure that /var/lib/docker is present
      ansible.builtin.file:
        path: /var/lib/docker
        state: directory
        owner: root
        group: root
        mode: '0755'

- name: Kolla-ansible preparations
  hosts: deploy
  gather_facts: false
  tags: kolla-preparations

  tasks:
    - name: Ensure that kolla serve directory exists
      become: true
      ansible.builtin.file:
        path: "{{ kolla_serve_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Ensure that kolla config directory exists
      become: true
      ansible.builtin.file:
        path: "{{ kolla_config_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Ensure that kolla deploy logs directory exists
      become: true
      ansible.builtin.file:
        path: "{{ kolla_deploy_logs_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Ensure that apt dependencies are installed
      become: true
      ansible.builtin.apt:
        name:
          - python3-dev
          - python3-venv
          - libffi-dev
          - gcc
          - libssl-dev

    - name: Ensure that kolla python venv exists
      ansible.builtin.pip:
        name:
          - pip
        state: latest
        virtualenv: "{{ kolla_venv_dir }}"
        virtualenv_command: python3 -m venv

    - name: Ensure that kolla-ansible is installed
      ansible.builtin.pip:
        name:
          - ansible-core>=2.14,<2.16
          - git+https://opendev.org/openstack/kolla-ansible@stable/2023.2
        virtualenv: "{{ kolla_venv_dir }}"

    - name: Ensure that kolla-ansible's inventory is present
      ansible.builtin.template:
        src: kolla-inventory.j2
        dest: "{{ kolla_serve_dir }}/inventory"
        mode: '0600'
      tags: [kolla-preparations, kolla-ansible-inventory]

    - name: Ensure that kolla-ansible's globals.yml file is present
      ansible.builtin.copy:
        src: kolla-globals.yml
        dest: "{{ kolla_config_dir }}/globals.yml"
        mode: '0600'
      tags: [kolla-preparations, kolla-ansible-globals]

    - name: Check if kolla-ansible's passwords.yml file is present
      ansible.builtin.stat:
        path: "{{ kolla_config_dir }}/passwords.yml"
      register: kolla_ansible_passwords_file
      tags: [kolla-preparations, kolla-ansible-passwords]

    - name: Ensure that a kolla-ansible's password file exist
      when: not kolla_ansible_passwords_file.stat.exists
      tags: [kolla-preparations, kolla-ansible-passwords]
      block:
        - name: Copy example passwords.yml
          ansible.builtin.copy:
            remote_src: true
            src: "{{ kolla_venv_dir }}/share/kolla-ansible/etc_examples/kolla/passwords.yml"
            dest: "{{ kolla_config_dir }}/passwords.yml"
            mode: '0600'

        - name: Generate passwords
          ansible.builtin.shell: "{{ kolla_venv_cmd }} && kolla-genpwd"
          changed_when: true

    # TODO ensure that /etc/kolla/config directory is up to date
